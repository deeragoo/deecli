name: Build and Release

on:
  workflow_run:
    workflows: ["Version Bump and Tag"]
    types:
      - completed

jobs:
  build:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build binary
        run: |
          output=deecli-${{ matrix.goos }}-${{ matrix.goarch }}
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            output+=.exe
          fi
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o $output ./cmd/deecli
          ls -lh $output

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.goos }}-${{ matrix.goarch }}-binary
          path: deecli-${{ matrix.goos }}-${{ matrix.goarch }}*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # So git tags are available

      - name: Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: linux-amd64-binary
          path: ./release/linux

      - name: Download Linux arm64 binary
        uses: actions/download-artifact@v4
        with:
          name: linux-arm64-binary
          path: ./release/linux-arm64

      - name: Download Windows binary
        uses: actions/download-artifact@v4
        with:
          name: windows-amd64-binary
          path: ./release/windows

      - name: Download Windows arm64 binary
        uses: actions/download-artifact@v4
        with:
          name: windows-arm64-binary
          path: ./release/windows-arm64

      - name: Download macOS binary
        uses: actions/download-artifact@v4
        with:
          name: darwin-amd64-binary
          path: ./release/macos

      - name: Download macOS arm64 binary
        uses: actions/download-artifact@v4
        with:
          name: darwin-arm64-binary
          path: ./release/macos-arm64

      - name: Make Linux and macOS binaries executable
        run: |
          chmod +x ./release/linux/deecli-linux-amd64
          chmod +x ./release/linux-arm64/deecli-linux-arm64
          chmod +x ./release/macos/deecli-darwin-amd64
          chmod +x ./release/macos-arm64/deecli-darwin-arm64

      - name: Get latest tag
        id: get_tag
        run: |
          TAG=$(git describe --tags --abbrev=0)
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Create GitHub Release and upload binaries
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: Release ${{ steps.get_tag.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux amd64 binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/linux/deecli-linux-amd64
          asset_name: deecli-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload Linux arm64 binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/linux-arm64/deecli-linux-arm64
          asset_name: deecli-linux-arm64
          asset_content_type: application/octet-stream

      - name: Upload Windows amd64 binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/windows/deecli-windows-amd64.exe
          asset_name: deecli-windows-amd64.exe
          asset_content_type: application/octet-stream

      - name: Upload Windows arm64 binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/windows-arm64/deecli-windows-arm64.exe
          asset_name: deecli-windows-arm64.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS amd64 binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/macos/deecli-darwin-amd64
          asset_name: deecli-darwin-amd64
          asset_content_type: application/octet-stream

      - name: Upload macOS arm64 binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/macos-arm64/deecli-darwin-arm64
          asset_name: deecli-darwin-arm64
          asset_content_type: application/octet-stream